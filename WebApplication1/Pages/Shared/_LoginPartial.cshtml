@using Microsoft.AspNetCore.Identity
@using WebApplication1.Areas.Identity.Data

@inject SignInManager<WebApplication1User> SignInManager
@inject UserManager<WebApplication1User> UserManager
@inject WebApplication1.Utilities.UserHelper UserHelper

@{ 
    bool IsSignIn = SignInManager.IsSignedIn(User);
    WebApplication1User user = null;
    if (IsSignIn)
    {
        user = await UserManager.GetUserAsync(User);
    }
}
<ul class="navbar-nav">
    @if (IsSignIn)
    {
        <li class="nav-item" id="messageIcon" data-user-email="@(user.Email)">
            <a class="nav-link text-dark"
               asp-page="/Messages/Index">
                Messages
                <span class="badge badge-danger d-none" id="msgCount"></span>
            </a>
        </li>
        <li class="nav-item">
            <a id="manage" class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @UserHelper.GetUserName(User).Result!</a>
        </li>
        <li class="nav-item">
            <form id="logoutForm" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Page("/Index", new { area = "" })">
                <button id="logout" type="submit" class="nav-link btn btn-link text-dark">Logout</button>
            </form>
        </li>
    }
    else
    {
        <li class="nav-item">
            <a class="nav-link text-dark" id="register" asp-area="Identity" asp-page="/Account/Register">Register</a>
        </li>
        <li class="nav-item">
            <a class="nav-link text-dark" id="login" asp-area="Identity" asp-page="/Account/Login">Login</a>
        </li>
    }
</ul>